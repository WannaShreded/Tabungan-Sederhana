/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tabungan_sederhana;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import System.DatabaseConnection;
import System.MutasiDAO;
import System.MutasiMasuk;
import System.Transaksi;
import System.TransaksiService;

/**
 *
 * @author MUHAMAD HIJRI
 */
public class Tabungan extends javax.swing.JFrame {
    private MutasiDAO mutasiDAO = new MutasiDAO();

    public Tabungan() {
        initComponents();
        loadTable(); // Memuat data mutasi saat form dibuka
        setTanggalSekarang();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        group = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tabung = new javax.swing.JButton();
        ubah = new javax.swing.JButton();
        saldo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        masuk = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        keluar = new javax.swing.JRadioButton();
        infoSaldo = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        tanggal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        group.add(masuk);
        group.add(keluar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID_TRANSAKSI", "TANGGAL", "MUTASI", " SALDO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        tabung.setText("SIMPAN");
        tabung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabungActionPerformed(evt);
            }
        });

        ubah.setText("UBAH");
        ubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ubahActionPerformed(evt);
            }
        });

        jLabel1.setText("JUMLAH");

        masuk.setText("MASUK");

        jLabel3.setText("MUTASI");

        keluar.setText("KELUAR");

        infoSaldo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        logout.setText("LOGOUT");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel2.setText("Tanggal");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tabung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ubah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(delete))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saldo, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keluar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(masuk, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(logout))
                    .addComponent(infoSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(tabung)
                        .addGap(16, 16, 16)
                        .addComponent(ubah)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keluar)
                            .addComponent(logout))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel1)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(saldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(infoSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(27, 27, 27)
                                .addComponent(masuk))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tanggal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabungActionPerformed
        simpanMutasi();
        saldo.setText("");
        group.clearSelection();
    }//GEN-LAST:event_tabungActionPerformed

    private void ubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ubahActionPerformed
        ubahMutasi();
    }//GEN-LAST:event_ubahActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        Login lgn = new Login();
        lgn.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_logoutActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tabungan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tabungan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tabungan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tabungan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tabungan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.ButtonGroup group;
    private javax.swing.JLabel infoSaldo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton keluar;
    private javax.swing.JButton logout;
    private javax.swing.JRadioButton masuk;
    private javax.swing.JTextField saldo;
    private javax.swing.JButton tabung;
    private javax.swing.JTextField tanggal;
    private javax.swing.JButton ubah;
    // End of variables declaration//GEN-END:variables
    private void loadTable() {
        List<Transaksi> mutasiList = mutasiDAO.getMutasiByUserId(Login.userId);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Bersihkan tabel sebelum memuat data baru
    
        // Ambil saldo terakhir
        TransaksiService transaksiService = new TransaksiService();
        double saldoTerakhir = transaksiService.getSaldoTerakhir(Login.userId);
        infoSaldo.setText("Saldo Saat Ini: Rp " + saldoTerakhir); // Perbarui label saldo
    
        // Muat data ke tabel
        for (Transaksi transaksi : mutasiList) {
            Object[] row = {
                transaksi.getId(),
                transaksi.getTanggal(),
                transaksi instanceof MutasiMasuk ? "Masuk" : "Keluar",
                transaksi.getJumlah()
            };
            model.addRow(row); // Tambahkan baris ke tabel
        }
    }
    
    private void simpanMutasi() {
    // Ambil tanggal dari JTextField yang sudah diisi otomatis
    String tgl = tanggal.getText().trim(); 
    String jml = saldo.getText().trim();
    String jenisMutasi = masuk.isSelected() ? "masuk" : "keluar";

    // Validasi input
    if (jml.isEmpty()) { // Hanya validasi jumlah, karena tanggal sudah otomatis
        JOptionPane.showMessageDialog(this, "Jumlah harus diisi", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Validasi format tanggal
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);
        Date tanggalMutasi = sdf.parse(tgl); // Parse tanggal dari JTextField

        double jumlahMutasi = Double.parseDouble(jml);
        if (jumlahMutasi <= 0) {
            JOptionPane.showMessageDialog(this, "Jumlah harus lebih dari 0", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi saldo untuk mutasi keluar
        if ("keluar".equals(jenisMutasi)) {
            TransaksiService transaksiService = new TransaksiService();
            double saldoTerakhir = transaksiService.getSaldoTerakhir(Login.userId);
            if (jumlahMutasi > saldoTerakhir) {
                JOptionPane.showMessageDialog(this, "Saldo tidak mencukupi untuk mutasi keluar", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Simpan mutasi ke database
        try (Connection conn = DatabaseConnection.connect()) {
            if (conn != null) {
                // Ambil saldo terakhir
                TransaksiService transaksiService = new TransaksiService();
                double saldoTerakhir = transaksiService.getSaldoTerakhir(Login.userId);

                // Hitung saldo baru
                double saldoBaru = saldoTerakhir;
                if ("masuk".equals(jenisMutasi)) {
                    saldoBaru += jumlahMutasi; // Tambah saldo untuk mutasi masuk
                } else if ("keluar".equals(jenisMutasi)) {
                    saldoBaru -= jumlahMutasi; // Kurangi saldo untuk mutasi keluar
                }

                // Simpan mutasi ke tabel `tabungan`
                String mutasiQuery = "INSERT INTO tabungan (user_id, tanggal_mutasi, jenis_mutasi, jumlah_mutasi, saldo) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement mutasiStmt = conn.prepareStatement(mutasiQuery)) {
                    mutasiStmt.setInt(1, Login.userId);
                    mutasiStmt.setDate(2, new java.sql.Date(tanggalMutasi.getTime())); // Gunakan tanggal dari JTextField
                    mutasiStmt.setString(3, jenisMutasi);
                    mutasiStmt.setDouble(4, jumlahMutasi);
                    mutasiStmt.setDouble(5, saldoBaru);
                    mutasiStmt.executeUpdate();
                }

                JOptionPane.showMessageDialog(this, "Mutasi berhasil disimpan! Saldo baru: Rp" + saldoBaru, "Sukses", JOptionPane.INFORMATION_MESSAGE);
                loadTable(); // Muat ulang tabel setelah menyimpan data
            }
        }
    } catch (ParseException ex) {
        JOptionPane.showMessageDialog(this, "Format tanggal harus YYYY-MM-DD", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    //UBAH MUTASI
    private void ubahMutasi() {
        // Ambil baris yang dipilih di tabel
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang akan diubah", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        // Ambil data dari baris yang dipilih
        int idMutasi = (int) jTable1.getValueAt(selectedRow, 0); // Ambil ID mutasi dari kolom pertama
        String tgl = tanggal.getText().trim();
        String jml = saldo.getText().trim();
        String jenisMutasi = masuk.isSelected() ? "masuk" : "keluar";
    
        // Validasi input
        if (tgl.isEmpty() || jml.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal dan Jumlah harus diisi", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        try {
            double jumlahMutasi = Double.parseDouble(jml);
            if (jumlahMutasi <= 0) {
                JOptionPane.showMessageDialog(this, "Jumlah harus lebih dari 0", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
    
            // Validasi format tanggal
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            sdf.parse(tgl); // Jika format salah, akan melempar ParseException
    
            // Update data mutasi di database
            try (Connection conn = DatabaseConnection.connect()) {
                if (conn != null) {
                    // Ambil data mutasi yang akan diubah
                    String getMutasiQuery = "SELECT jenis_mutasi, jumlah_mutasi, saldo FROM tabungan WHERE id = ? AND user_id = ?";
                    String jenisMutasiLama = "";
                    double jumlahMutasiLama = 0.0;
    
                    try (PreparedStatement getMutasiStmt = conn.prepareStatement(getMutasiQuery)) {
                        getMutasiStmt.setInt(1, idMutasi);
                        getMutasiStmt.setInt(2, Login.userId);
                        ResultSet rs = getMutasiStmt.executeQuery();
                        if (rs.next()) {
                            jenisMutasiLama = rs.getString("jenis_mutasi");
                            jumlahMutasiLama = rs.getDouble("jumlah_mutasi");
                        }
                    }
    
                    // Ambil saldo terakhir
                    String saldoQuery = "SELECT saldo FROM tabungan WHERE user_id = ? ORDER BY id DESC LIMIT 1";
                    double saldoTerakhir = 0.0;
    
                    try (PreparedStatement saldoStmt = conn.prepareStatement(saldoQuery)) {
                        saldoStmt.setInt(1, Login.userId);
                        ResultSet rs = saldoStmt.executeQuery();
                        if (rs.next()) {
                            saldoTerakhir = rs.getDouble("saldo");
                        }
                    }
    
                    // Hitung saldo baru
                    double saldoBaru = saldoTerakhir;
    
                    // Kembalikan saldo ke keadaan sebelum mutasi lama
                    if ("masuk".equals(jenisMutasiLama)) {
                        saldoBaru -= jumlahMutasiLama; // Kurangi saldo untuk mutasi masuk yang lama
                    } else if ("keluar".equals(jenisMutasiLama)) {
                        saldoBaru += jumlahMutasiLama; // Tambah saldo untuk mutasi keluar yang lama
                    }
    
                    // Terapkan mutasi baru
                    if ("masuk".equals(jenisMutasi)) {
                        saldoBaru += jumlahMutasi; // Tambah saldo untuk mutasi masuk yang baru
                    } else if ("keluar".equals(jenisMutasi)) {
                        if (jumlahMutasi > saldoBaru) {
                            JOptionPane.showMessageDialog(this, "Saldo tidak mencukupi untuk mutasi keluar", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        saldoBaru -= jumlahMutasi; // Kurangi saldo untuk mutasi keluar yang baru
                    }
    
                    // Update data mutasi di database
                    String updateQuery = "UPDATE tabungan SET tanggal_mutasi = ?, jenis_mutasi = ?, jumlah_mutasi= ?, saldo = ? WHERE id = ? AND user_id = ?";
                    try (PreparedStatement ps = conn.prepareStatement(updateQuery)) {
                        ps.setString(1, tgl);
                        ps.setString(2, jenisMutasi);
                        ps.setDouble(3, jumlahMutasi);
                        ps.setDouble(4, saldoBaru);
                        ps.setInt(5, idMutasi);
                        ps.setInt(6, Login.userId);
                        int rowsAffected = ps.executeUpdate();
    
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "Data berhasil diubah! Saldo baru: Rp" + saldoBaru, "Sukses", JOptionPane.INFORMATION_MESSAGE);
                            loadTable(); // Muat ulang tabel setelah mengubah data
                        } else {
                            JOptionPane.showMessageDialog(this, "Gagal mengubah data", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Koneksi ke database gagal", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Format tanggal harus YYYY-MM-DD", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void setTanggalSekarang() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    tanggal.setText(sdf.format(new Date())); // Set tanggal ke JTextField
}
}
